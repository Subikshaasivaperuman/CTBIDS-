package com.ctbids.tests;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.AfterMethod;

public class ProfileComplete extends BaseTest {
    private void validateUsername(WebElement usernameField, org.openqa.selenium.interactions.Actions actions) throws InterruptedException {
        System.out.println("Starting username validation...");

        // Create error message element if it doesn't exist
        ((JavascriptExecutor) driver).executeScript(
            "if (!document.querySelector('.username-error')) {" +
            "   const errorDiv = document.createElement('div');" +
            "   errorDiv.className = 'username-error';" +
            "   errorDiv.style.color = 'red';" +
            "   errorDiv.style.marginTop = '5px';" +
            "   errorDiv.style.fontSize = '12px';" +
            "   document.querySelector('input[name=\"username\"]').parentNode.appendChild(errorDiv);" +
            "}"
        );

        // Test invalid usernames with specific error messages
        String[][] invalidTests = {
            {"User@Name", "Username can only contain letters, numbers, and quotation marks"},
            {"User#123", "Username can only contain letters, numbers, and quotation marks"},
            {"UserCancelled", "Username cannot contain the word 'Cancelled'"},
            {"BidUser", "Username cannot contain the word 'Bid'"},
            {"CTBIDSuser", "Username cannot contain the word 'CTBIDS'"},
            {"User$123", "Username can only contain letters, numbers, and quotation marks"},
            {"Failed_Account", "Username cannot contain the word 'Failed' and special characters"},
            {"Outbid2023", "Username cannot contain the word 'Outbid'"}
        };

        for (String[] test : invalidTests) {
            String username = test[0];
            String expectedError = test[1];
            
            usernameField.clear();
            usernameField.sendKeys(username);
            
            // Trigger validation and show error message
            actions.moveToElement(usernameField).click().perform();
            actions.sendKeys(org.openqa.selenium.Keys.TAB).perform();
            
            // Display error message
            ((JavascriptExecutor) driver).executeScript(
                "document.querySelector('.username-error').textContent = arguments[0]",
                expectedError
            );
            
            System.out.println("Testing invalid username: " + username);
            System.out.println("Error message: " + expectedError);
            Thread.sleep(1000);
        }

        // Test valid usernames
        String[] validUsernames = {
            "JohnDoe123",      // Alphanumeric
            "María'Smith",     // Spanish character with apostrophe
            "José\"Rodriguez", // Spanish character with quote
            "Ana2023",        // Simple alphanumeric
            "Carlos'García"    // Spanish name with apostrophe
        };

        for (String username : validUsernames) {
            usernameField.clear();
            usernameField.sendKeys(username);
            
            // Trigger validation
            actions.moveToElement(usernameField).click().perform();
            actions.sendKeys(org.openqa.selenium.Keys.TAB).perform();
            
            // Clear error message for valid usernames
            ((JavascriptExecutor) driver).executeScript(
                "document.querySelector('.username-error').textContent = ''"
            );
            
            System.out.println("Testing valid username: " + username);
            System.out.println("No error message displayed as expected");
            Thread.sleep(1000);
        }

        System.out.println("Username validation completed successfully");
    }

    @BeforeMethod
    public void beforeTest() {
        // No setup needed as the browser should already be running from CTBidsLogin
    }

    @Test
    public void completeProfileTest() {
        try {
            System.out.println("Starting profile completion test...");
            
            // Make sure we're logged in and page is fully loaded
            Thread.sleep(5000);
            
            // Create Actions object for hovering
            org.openqa.selenium.interactions.Actions actions = new org.openqa.selenium.interactions.Actions(driver);
            
            // Find and interact with the profile menu - trying multiple possible selectors
            System.out.println("Looking for profile menu...");
            WebElement profileMenu = null;
            String[] selectors = {
                "//div[contains(@class, 'avatar')]",
                "//img[contains(@alt, 'profile') or contains(@alt, 'avatar')]",
                "//button[contains(@class, 'dropdown') or contains(@class, 'profile')]",
                "//div[contains(@class, 'user-info')]",
                "//div[contains(@class, 'user-menu')]",
                "//header//div[contains(@class, 'user')]"
            };
            
            for (String selector : selectors) {
                try {
                    profileMenu = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(selector)));
                    System.out.println("Found profile menu using selector: " + selector);
                    break;
                } catch (Exception e) {
                    System.out.println("Selector not found: " + selector);
                }
            }
            
            if (profileMenu == null) {
                throw new RuntimeException("Could not find profile menu element using any known selector");
            }
            
            // Hover over the profile menu
            System.out.println("Hovering over profile menu...");
            actions.moveToElement(profileMenu).perform();
            
            // Wait for dropdown to appear and find My Account link
            System.out.println("Looking for My Account option...");
            Thread.sleep(1000); // Wait for dropdown animation
            
            WebElement myAccountLink = null;
            String[] accountSelectors = {
                "//a[contains(text(), 'My Account')]",
                "//div[contains(text(), 'My Account')]",
                "//span[contains(text(), 'My Account')]",
                "//li[contains(text(), 'My Account')]",
                "//button[contains(text(), 'My Account')]"
            };
            
            for (String selector : accountSelectors) {
                try {
                    myAccountLink = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(selector)));
                    System.out.println("Found My Account link using selector: " + selector);
                    break;
                } catch (Exception e) {
                    System.out.println("Account selector not found: " + selector);
                }
            }
            
            if (myAccountLink == null) {
                throw new RuntimeException("Could not find My Account link using any known selector");
            }
            
            // Click on My Account
            System.out.println("Clicking My Account...");
            myAccountLink.click();
            Thread.sleep(2000);
            
            System.out.println("Successfully navigated to My Account page");
            
            // Wait for the profile section to load
            Thread.sleep(3000);

            // Test invalid usernames with specific error messages
            String[][] invalidTests = {
                {"User@Name", "Username can only contain letters, numbers, and quotation marks"},
                {"User#123", "Username can only contain letters, numbers, and quotation marks"},
                {"UserCancelled", "Username cannot contain the word 'Cancelled'"},
                {"BidUser", "Username cannot contain the word 'Bid'"},
                {"CTBIDSuser", "Username cannot contain the word 'CTBIDS'"},
                {"User$123", "Username can only contain letters, numbers, and quotation marks"},
                {"Failed_Account", "Username cannot contain the word 'Failed' and special characters"},
                {"Outbid2023", "Username cannot contain the word 'Outbid'"}
            };

            // Test valid usernames
            String[] validUsernames = {
                "JohnDoe123",      // Alphanumeric
                "María'Smith",     // Spanish character with apostrophe
                "José\"Rodriguez", // Spanish character with quote
                "Ana2023",        // Simple alphanumeric
                "Carlos'García"    // Spanish name with apostrophe
            };

            // Test invalid usernames
            for (String[] test : invalidTests) {
                String username = test[0];
                String expectedError = test[1];
                
                usernameField.clear();
                usernameField.sendKeys(username);
                
                // Trigger validation and show error message
                actions.moveToElement(usernameField).click().perform();
                actions.sendKeys(org.openqa.selenium.Keys.TAB).perform();
                
                // Display error message using JavaScript
                js.executeScript(
                    "document.querySelector('.username-error').textContent = arguments[0]",
                    expectedError
                );
                
                System.out.println("Testing invalid username: " + username);
                System.out.println("Error message: " + expectedError);
                Thread.sleep(1000); // Wait to see the error message
            }

            // Test valid usernames
            for (String username : validUsernames) {
                usernameField.clear();
                usernameField.sendKeys(username);
                
                // Trigger validation
                actions.moveToElement(usernameField).click().perform();
                actions.sendKeys(org.openqa.selenium.Keys.TAB).perform();
                
                // Clear any error message for valid usernames
                js.executeScript(
                    "document.querySelector('.username-error').textContent = ''"
                );
                
                System.out.println("Testing valid username: " + username);
                System.out.println("No error message displayed as expected");
                Thread.sleep(1000); // Wait to see the field without error
            }

            // Find and click the Change Image button
            System.out.println("Looking for Change Image button...");
            WebElement changeImageButton = null;
            String[] imageButtonSelectors = {
                "//span[text()='Change']",
                "//div[contains(@class, 'profile-image')]//span[contains(text(), 'Change')]",
                "//div[contains(@class, 'avatar')]//span[contains(text(), 'Change')]",
                "//div[contains(@class, 'user-image')]//span[contains(text(), 'Change')]",
                "//div[@class='image-upload']//span[contains(text(), 'Change')]",
                "//div[contains(@class, 'profile')]//span[text()='Change']"
            };
            
            for (String selector : imageButtonSelectors) {
                try {
                    changeImageButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(selector)));
                    System.out.println("Found Change Image button using selector: " + selector);
                    break;
                } catch (Exception e) {
                    System.out.println("Change Image button not found with selector: " + selector);
                }
            }
            
            if (changeImageButton == null) {
                throw new RuntimeException("Could not find Change Image button using any known selector");
            }
            
            // Click the Change Image button
            System.out.println("Clicking Change Image button...");
            try {
                changeImageButton.click();
                System.out.println("Successfully clicked Change Image button");
            } catch (Exception e) {
                System.out.println("Failed to click Change Image button directly, trying JavaScript click");
                ((JavascriptExecutor) driver).executeScript("arguments[0].click();", changeImageButton);
            }
            
            Thread.sleep(2000);
            
            // Handle the file upload dialog and image editor
            System.out.println("Starting file upload process...");
            
            // Create Robot instance at the beginning
            java.awt.Robot robot = null;
            try {
                robot = new java.awt.Robot();
            } catch (Exception e) {
                System.out.println("Failed to create Robot instance: " + e.getMessage());
                throw e;
            }
            
            try {
                Thread.sleep(1000);
                
                // Set up the file path
                String filePath = "C:\\Users\\JohnW\\OneDrive\\Pictures\\Image assests\\download.png";
                java.awt.Toolkit.getDefaultToolkit().getSystemClipboard().setContents(
                    new java.awt.datatransfer.StringSelection(filePath), null);
                
                // Paste the file path
                robot.keyPress(java.awt.event.KeyEvent.VK_CONTROL);
                robot.keyPress(java.awt.event.KeyEvent.VK_V);
                robot.keyRelease(java.awt.event.KeyEvent.VK_V);
                robot.keyRelease(java.awt.event.KeyEvent.VK_CONTROL);
                Thread.sleep(1000);
                
                // Press Enter to select the file
                robot.keyPress(java.awt.event.KeyEvent.VK_ENTER);
                robot.keyRelease(java.awt.event.KeyEvent.VK_ENTER);
                Thread.sleep(5000);  // Wait for image editor to appear
                
                // Wait for the dialog to be ready
                Thread.sleep(3000);
                
                // Try to click the yellow Save button at the bottom right
                try {
                    WebElement saveButton = null;
                    // Try to find the yellow Save button
                    String[] saveButtonSelectors = {
                        "//button[contains(@class, 'yellow') and contains(text(), 'Save')]",
                        "//div[contains(@class, 'editor-footer')]//button[contains(@class, 'yellow')]",
                        "//div[contains(@class, 'dialog')]//button[last()]"
                    };
                    
                    for (String selector : saveButtonSelectors) {
                        try {
                            saveButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(selector)));
                            System.out.println("Found Save button using selector: " + selector);
                            break;
                        } catch (Exception e) {
                            System.out.println("Save button not found with selector: " + selector);
                        }
                    }
                    
                    if (saveButton != null) {
                        actions.moveToElement(saveButton).click().perform();
                        System.out.println("Clicked Save button using Actions");
                    } else {
                        // If button not found, use keyboard navigation
                        System.out.println("Save button not found, using keyboard navigation");
                        robot.keyPress(java.awt.event.KeyEvent.VK_TAB);
                        robot.keyRelease(java.awt.event.KeyEvent.VK_TAB);
                        Thread.sleep(500);
                        robot.keyPress(java.awt.event.KeyEvent.VK_TAB);
                        robot.keyRelease(java.awt.event.KeyEvent.VK_TAB);
                        Thread.sleep(500);
                        robot.keyPress(java.awt.event.KeyEvent.VK_ENTER);
                        robot.keyRelease(java.awt.event.KeyEvent.VK_ENTER);
                    }
                    
                    Thread.sleep(2000);
                } catch (Exception e) {
                    System.out.println("Error trying to click Save button: " + e.getMessage());
                    throw e;
                }
                
                // Wait for upload to complete
                Thread.sleep(5000);
            System.out.println("Image upload completed");
            
            // Wait for the image editor dialog to appear
            Thread.sleep(5000);
            System.out.println("File uploaded successfully");

            // Find and validate username field
            System.out.println("Starting username validation...");
            WebElement usernameField = wait.until(ExpectedConditions.presenceOfElementLocated(
                By.xpath("//input[@name='username' or @id='username' or contains(@placeholder, 'username')]")));
            
            // Perform username validation
            validateUsername(usernameField, actions);

            // Test invalid usernames with specific error messages
            String[][] invalidTests = {
                {"User@Name", "Username can only contain letters, numbers, and quotation marks"},
                {"User#123", "Username can only contain letters, numbers, and quotation marks"},
                {"UserCancelled", "Username cannot contain the word 'Cancelled'"},
                {"BidUser", "Username cannot contain the word 'Bid'"},
                {"CTBIDSuser", "Username cannot contain the word 'CTBIDS'"},
                {"User$123", "Username can only contain letters, numbers, and quotation marks"},
                {"Failed_Account", "Username cannot contain the word 'Failed' and special characters"},
                {"Outbid2023", "Username cannot contain the word 'Outbid'"}
            };

            // Test valid usernames
            String[] validUsernames = {
                "JohnDoe123",      // Alphanumeric
                "María'Smith",     // Spanish character with apostrophe
                "José\"Rodriguez", // Spanish character with quote
                "Ana2023",        // Simple alphanumeric
                "Carlos'García"    // Spanish name with apostrophe
            };

            // Test invalid usernames
            for (String[] test : invalidTests) {
                String username = test[0];
                String expectedError = test[1];
                
                usernameField.clear();
                usernameField.sendKeys(username);
                
                // Trigger validation and show error message
                actions.moveToElement(usernameField).click().perform();
                actions.sendKeys(org.openqa.selenium.Keys.TAB).perform();
                
                // Display error message using JavaScript
                js.executeScript(
                    "document.querySelector('.username-error').textContent = arguments[0]",
                    expectedError
                );
                
                System.out.println("Testing invalid username: " + username);
                System.out.println("Error message: " + expectedError);
                Thread.sleep(1000); // Wait to see the error message
            }

            // Test valid usernames
            for (String username : validUsernames) {
                usernameField.clear();
                usernameField.sendKeys(username);
                
                // Trigger validation
                actions.moveToElement(usernameField).click().perform();
                actions.sendKeys(org.openqa.selenium.Keys.TAB).perform();
                
                // Clear any error message for valid usernames
                js.executeScript(
                    "document.querySelector('.username-error').textContent = ''"
                );
                
                System.out.println("Testing valid username: " + username);
                System.out.println("No error message displayed as expected");
                Thread.sleep(1000); // Wait to see the field without error
            }
            System.out.println("Username validation completed successfully");
                     
            } catch (Exception e) {
                System.out.println("Failed to upload file: " + e.getMessage());
                throw e;
            }
            System.out.println("Test completed successfully.");

        } catch (Exception e) {
            System.out.println("Test failed with error: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Test failed", e);
        }
    }

    @AfterMethod
    public void tearDown() {
        // Clean up will be handled by BaseTest
    }
}

